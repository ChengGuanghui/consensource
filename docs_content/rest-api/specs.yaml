openapi: 3.0.1
info:
  version: 0.1.0
  title: ConsenSource - Certificate Registry
  description: >
    An API providing HTTP/JSON interface to the ConsenSource blockchain application
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    AuthorizationModel:
      description: >-
        Mapping of a participant's public key to their role within an
        organization
      type: object
      properties:
        public_key:
          description: Public key of an authorized user
          type: string
        role:
          $ref: '#/components/schemas/RoleEnum'
    ErrorModel:
      description: An error object
      type: object
      properties:
        error:
          properties:
            status:
              description: HTTP status code
              type: integer
            message:
              description: A message describing the error that occurred
              type: string
    HeadModel:
      description: Current block ID
      type: string
    PagingModel:
      description: A series of links to the resource/resources in different pages
      type: object
      properties:
        first:
          type: string
          description: Link to the first page
        last:
          type: string
          description: Link to the last page
        limit:
          type: integer
          description: The maximum number of items being shown per page
        next:
          type: string
          description: Link to the next page
        offset:
          type: integer
          description: The index of the resource to start a page with
        prev:
          type: string
          description: Link to the previous page
        total:
          type: integer
          description: Total number of items matching the query
    LinkModel:
      description: A link to the resource/resources at the current block head
      type: string
    OrganizationModel:
      description: An organization model
      type: object
      properties:
        id:
          description: The ID of an organization
          type: string
        name:
          description: Name of an organization
          type: string
        organization_type:
          $ref: '#/components/schemas/OrganizationTypeEnum'
    OrganizationExpandedModel:
      description: An organization model expanded to include contact information and authorizations
      allOf:
        - $ref: '#/components/schemas/OrganizationModel'
      type: object
      properties:
        contact:
           type: array
           items:
             $ref: '#/components/schemas/ContactModel'
        authorizations:
          type: array
          items:
             $ref: '#/components/schemas/AuthorizationModel'
    FactoryModel:
     description: An factory model
     allOf:
       - $ref: '#/components/schemas/OrganizationExpandedModel'
       - type: object
         properties:
           address:
              type: object
              properties:
                street_line_1:
                  type: string
                street_line_2:
                  type: string
                city:
                  type: string
                state_province:
                  type: string
                country:
                  type: string
                postal_code:
                  type: string
           certificates:
              type: array
              items:
                $ref: '#/components/schemas/CertificateModel'
    AgentModel:
      description: An Agent model
      type: object
      properties:
        public_key:
          description: Agents's public key
          type: string
        name:
          description: Agents's name
          type: string
        organization:
          $ref: '#/components/schemas/OrganizationModel'
    BlockModel:
      description: Block information
      type: object
      properties:
        block_num:
          description: Height of the block
          type: integer
        block_id:
          description: Block ID
          type: string
    ContactModel:
      description: Contact information for an organization
      type: object
      properties:
        name:
          description: "Name of the contact"
          type: string
        language_code:
          description: "Contact's preferred language for communication"
          type: string
        phone_number:
          description: "Contact's phone number"
          type: string
    CertificateModel:
      description: "A model for a certificate"
      type: object
      properties:
        id:
          type: string
        certifying_body_id:
          description: "The id of the certifying organization who issued the certificate"
          type: string
        certifying_body:
          description: "The name of the certifying organization who issued the certificate"
          type: string
        factory_id:
          description: "The id of the factory that this certificate belongs to"
          type: string
        factory_name:
          description: "The name of the factory that this certificate belongs to"
          type: string
        standard_name:
          description: "The name of the standard this certificate is valid for"
          type: string
        standard_version:
          description: "The version of the standard this certificate is valid for"
          type: string
        valid_from:
          description: "The date this certificate starts being valid"
          type: integer
        valid_to:
          description: "The expiration date for this certificate"
          type: integer
    SimplifiedStandardModel:
      description: "Representation of a certification standard with fewer fields"
      type: object
      properties:
        standard_id:
          type: string
          description: A unique identifier for the standard
        standard_name:
          type: string
          description: Name of the standard
    StandardModel:
      description: "Representation of a certification standard"
      type: object
      properties:
        standard_id:
          type: string
          description: A unique identifier for standard
        organization_id:
          type: string
          description: Id of the standards organization that created this standard
        name:
          type: string
          description: Name of the standard
        versions:
          type: array
          items:
            $ref: "#/components/schemas/StandardVersionsModel"
    StandardVersionsModel:
        description: "Representation of a version of a standard"
        type: object
        properties:
          version:
            type: string
            description: Identifier for the version, usually version number
          external_link:
            type: string
            description: Link to the requirements of this standard
          description:
            type: string
            description: Short description of this standard version
          approval_date:
            type: string
            description: Date the version has been approved
    RequestModel:
      description: "Representation of a factory's request to be certified under a particular standard"
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the request
        factory:
          $ref: "#/components/schemas/FactoryModel"
        standard:
          $ref: "#/components/schemas/StandardModel"
        status:
          $ref: "#/components/schemas/RequestStatusEnum"
        request_date:
          type: integer
          description: Unix time stamp of the date the requested was opened
    RequestStatusEnum:
      description: Status of a request
      type: string
      enum:
        - Open
        - InProgress
        - Closed
        - Certified
        - UnsetStatus
    OrganizationTypeEnum:
      description: Type of an organization
      type: string
      enum:
        - CertifyingBody
        - StandardsBody
        - Factory
    RoleEnum:
      description: Role of a participant within an organization
      type: string
      enum:
        - Admin
        - Transactor
    Batch:
      properties:
        header:
          $ref: '#/components/schemas/BatchHeader'
        header_signature:
          type: string
          example: >-
            89807bfc9089e37e00d87d97357de14cfbc455cd608438d426a625a30a0da9a31c406983803c4aa27e1f32a3ff61709e8ec4b56abbc553d7d330635b5d27029c
    BatchHeader:
      properties:
        signer_public_key:
          type: string
          example: 038bba5708acc262464c9fe30d3de9e905a9a5fa30cedd151dd9cd09ea26d46d00
        transaction_ids:
          type: array
          items:
            type: string
            example: >-
              540a6803971d1880ec73a96cb97815a95d374cbad5d865925e5aa0432fcf1931539afe10310c122c5eaae15df61236079abbf4f258889359c4d175516934484a
    BatchList:
      properties:
        batches:
          type: array
          items:
            $ref: '#/components/schemas/Batch'
    BatchStatuses:
      type: array
      items:
        properties:
          id:
            type: string
          status:
            type: string
            enum:
              - COMMITTED
              - INVALID
              - PENDING
              - UNKNOWN
          invalid_transactions:
            type: array
            items:
              properties:
                id:
                  type: string
                  example: >-
                    540a6803971d1880ec73a96cb97815a95d374cbad5d865925e5aa0432fcf1931539afe10310c122c5eaae15df61236079abbf4f258889359c4d175516934484a
                message:
                  type: string
  responses:
    SuccessResponse:
      description: Success response
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  message:
                    type: string
                    example: Batches submitted
    ServerError:
      description: Error response for an unexpected server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
          example:
            status: 500
            message: An unexpected error has occurred
    BadRequestError:
      description: Error response for a bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
          example:
            error:
              status: 400
              message: Bad request
    UnauthorizedError:
      description: Error response for an unauthorized request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
          example:
            error:
              status: 401
              message: Unauthorized
    NotFoundError:
      description: Error response for a not found error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
          example:
            error:
              status: 404
              message: Resource does not exist
    TooManyRequests:
      description: Error response for a too many requests error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
          example:
            error:
              status: 429
              message: Too many requests
    ServiceUnavailable:
      description: Error response for a not service unavailable error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
          example:
            error:
              status: 503
              message: Service Unavailable
  parameters:
    head:
      name: head
      description: The height of the block to use as the chain head
      in: query
      schema:
        type: string
        default: latest
      example: 12
    offset:
      name: offset
      description: The index of the resource to start a page with
      in: query
      schema:
        type: number
        default: 0
    limit:
      name: limit
      description: The maximum number of resources to return per page
      in: query
      schema:
        type: number
        default: 100
    expand:
      name: expand
      description: If this param is passed with value "True" certain fields that that were id's will be expanded to include the object they reference
      in: query
      schema:
        type: boolean
        default: false
paths:
  '/api/users':
    post:
      description: Creates a new entry in the key escrow database for an agent
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  description: Username of a registered participant
                hashed_password:
                  description: >-
                    Hashed password to be used for participant authentication.
                    This password should be hashed by the client, which will be
                    hashed again before storing in the database.
                public_key:
                  description: "The users's public key for their on-chain identity"
                encrypted_private_key:
                  description: >-
                    The participant's encrypted private key. This private key
                    should be generated by the client, encrypted using the
                    participant's raw password, and encoded as a hex string.
                transaction_id:
                  description: "The transaction used to create this user's on-chain identity"
                batch_id:
                  description:
                    "The batch used to create this user's on-chain identity"
              required:
                - username
                - hashed_password
                - public_key
                - encrypted_private_key
                - batch_id
                - transaction_id
              example:
                username: user1
                hashed_password: >-
                  243262243132243046536949706b5272644c71336c7254563679727565494b376d4b3554696b734662685962652f6a52562e437a70462f6552484b4b
                encrypted_private_key: >-
                  65794a68624763694f694a49557a49314e694973496d5634634349364d5455794f4463304d6a41344d43776961574630496a6f784e5449344e7a4d344e44677766512e65794a7764574a7361574e6661325635496a6f694d444a6d4d7a49304d4755775a4467334e324930596d4d334d6a67784d4745794e7a41344e7a4133596d4933596d51354f546b795a5468685a4467774e47526c4d5451774d7a4a6d4e6d4933597a63794e6d5a69597a5931496e302e6c65415a6c6175542d7178742d346c64682d6d3145755a7465596b425845456173557142417353795f5a4d
                public_key: "020efa89a89835ffd4ecaf92baeb83b74eea6e5ade10a5c570debfd12a772baa87"
                transaction_id: "2a0cdfed2f2d9ab63a4a1f7606e0fc7514fb0d474d9381b1e6130841992ad888214109d7ea340811a4f89a774ff2364018d42c1476b6ad4509aa1266699e8f34"
                batch_id: "6995aadf3b2abc5b2dcc47ffcd6c0b6b87e658e3a0236437d09fc9544c5b43812e16ac1e99993051380e39e9f95ecf3648169d499aaf0d6d3460ad8497a50e54"

      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Ok
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/users/authenticate:
    post:
      description: Authenticates a participant and returns an encrypted private key
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  description: Username of a registered agent
                hashed_password:
                  description: Hashed password of a registered agent
              required:
                - username
                - password
              example:
                username: user1
                hashed_password: >-
                  243262243132243046536949706b5272644c71336c7254563679727565494b376d4b3554696b734662685962652f6a52562e437a70462f6552484b4b
      responses:
        '200':
          description: Success response with user information
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    properties:
                      username:
                        type: string
                      public_key:
                        type: string
                      encrypted_private_key:
                        type: string
              example:
                  username: user1
                  public_key: "020efa89a89835ffd4ecaf92baeb83b74eea6e5ade10a5c570debfd12a772baa87"
                  encrypted_private_key: >-
                    eyJhbGciOiJIUzI1NiIsImV4cCI6MTUyODc0MjA4MCwiaWF0IjoxNTI4NzM4NDgwfQ.eyJwdWJsaWNfa2V5IjoiMDJmMzI0MGUwZDg3N2I0YmM3MjgxMGEyNzA4NzA3YmI3YmQ5OTkyZThhZDgwNGRlMTQwMzJmNmI3YzcyNmZiYzY1In0.leAZlauT-qxt-4ldh-m1EuZteYkBXEEasUqBAsSy_ZM
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          description: Error response to a failed login attempt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              example:
                status: 401
                message: Username or password was incorrect
        '500':
          $ref: '#/components/responses/ServerError'
  /api/batches:
    post:
      description: |
        Accepts a protobuf formatted `BatchList` as an octet-stream binary
        file and submits it to the validator to be committed.
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/BatchList'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/batch_statuses:
    get:
      description: |
        Fetches an array of objects with a status and id for each batch
        requested. There are four possible statuses with string values
        `'COMMITTED'`, `'INVALID'`, `'PENDING'`, and `'UNKNOWN'`.

        The batch(es) you want to check can be specified using the `id` filter
        parameter. If a `wait` time is specified in the URL, the API will wait
        to respond until all batches are committed, or the time in seconds has
        elapsed. If the value of `wait` is not set (i.e., `?wait&id=...`), or
        it is set to any non-integer value other than `false`, the wait time
        will be just under the API's specified timeout (usually 300).

        Note that because this route does not return full resources, the
        response will not be paginated, and there will be no `head` or
        `paging` properties.
      parameters:
        - name: id
          description: A comma-separated list of batch ids
          in: query
          required: true
          schema:
            type: string
        - name: wait
          in: query
          schema:
            type: integer
            description: A time in seconds to wait for commit
      responses:
        '200':
          description: Success response with requested batch statuses
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BatchStatuses'
                  link:
                    $ref: '#/components/schemas/LinkModel'
              example:
                data:
                  - id: "6995aadf3b2abc5b2dcc47ffcd6c0b6b87e658e3a0236437d09fc9544c5b43812e16ac1e99993051380e39e9f95ecf3648169d499aaf0d6d3460ad8497a50e54"
                    status: INVALID
                    invalid_transactions:
                      - id: >-
                          540a6803971d1880ec73a96cb97815a95d374cbad5d865925e5aa0432fcf1931539afe10310c122c5eaae15df61236079abbf4f258889359c4d175516934484a
                      - message: No organization with that ID exists
                link: "/batch_statuses?id=6995aadf3b2abc5b2dcc47ffcd6c0b6b87e658e3a0236437d09fc9544c5b43812e16ac1e99993051380e39e9f95ecf3648169d499aaf0d6d3460ad8497a50e54"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/organizations:
    get:
      description: Returns all organizations
      parameters:
        - $ref: '#/components/parameters/head'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - name: "name"
          description: If a name is passed, the results will be filtered and all organizations that match the name will be returned.
          in: query
          schema:
            type: string
        - name: organization_type
          description: If organization_type is passed, the results will be filtered and all organizations that match the type will be returned. 1 = CertifyingBody, other numbers = StandardsBody
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Success response with array of organizations
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/FactoryModel'
                        - $ref: '#/components/schemas/OrganizationExpandedModel'
                      discriminator:
                        propertyName: organization_type
                  head:
                    $ref: '#/components/schemas/HeadModel'
                  link:
                    $ref: '#/components/schemas/LinkModel'
                  paging:
                    $ref: '#/components/schemas/PagingModel'
              example:
                data:
                  - id: "1a352ed7d2b768969197c8c617bd033981b08df29af86d01c45a56ae5666"
                    name: "Stora Enso "
                    organization_type: "Factory"
                    address:
                      city: "Townsville"
                      country: "US"
                      postal_code: "55123"
                      state_province: "MN"
                      street_line_1: "123 Main St."
                    authorizations:
                      - public_key: "03a0cb061ce3f31098c45c43e8d70a8a4f3f79f2f903d7f28485633894816a5522"
                        role: "Admin"
                      - public_key": "03a0cb061ce3f31098c45c43e8d70a8a4f3f79f2f903d7f28485633894816a5522"
                        role: "Transactor"
                    contacts:
                      - language_code: "en"
                        name: "Jonathan Carter"
                        phone_number: "432-123-1234"
                  - id: "29750870-e127-11e8-b36b-2ffd372eb4d4"
                    name: "FSC"
                    organization_type: "StandardsBody"
                    authorizations:
                      - public_key: "020efa89a89835ffd4ecaf92baeb83b74eea6e5ade10a5c570debfd12a772baa87"
                        role: "Admin"
                      - public_key: "020efa89a89835ffd4ecaf92baeb83b74eea6e5ade10a5c570debfd12a772baa87"
                        role: "Transactor"
                    contacts:
                      - language_code: "en"
                        name: "Janet Sparks"
                        phone_number: "342-123-123"
                head: 12
                link: "/api/organizations?head=12&limit=100&offset=0"
                paging:
                  first: "/api/organizations?head=12&limit=100&offset=0"
                  last: "/api/organizations?head=12&limit=100&offset=0"
                  limit: 100,
                  next: "/api/organizations?head=12&limit=100&offset=0"
                  offset: 0,
                  prev: "/api/organizations?head=12&limit=100&offset=0"
                  total: 2
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/ServerError'
  '/api/organizations/{organization_id}':
    parameters:
      - in: path
        name: organization_id
        schema:
          type: string
        required: true
        description: ID of an organization
        example: 29750870-e127-11e8-b36b-2ffd372eb4d4
    get:
      description: Returns the organization with specified ID
      parameters:
        - $ref: '#/components/parameters/head'
      responses:
        '200':
          description: Success response with requested organization
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    oneOf:
                      - $ref: '#/components/schemas/OrganizationExpandedModel'
                      - $ref: '#/components/schemas/FactoryModel'
                    discriminator:
                      propertyName: organization_type
                  head:
                    $ref: '#/components/schemas/HeadModel'
                  link:
                    $ref: '#/components/schemas/LinkModel'
                example:
                  data:
                    id: "29750870-e127-11e8-b36b-2ffd372eb4d4"
                    name: "FSC"
                    organization_type: "StandardsBody"
                    authorizations:
                      - public_key: "020efa89a89835ffd4ecaf92baeb83b74eea6e5ade10a5c570debfd12a772baa87"
                        role: "Admin"
                      - public_key: "020efa89a89835ffd4ecaf92baeb83b74eea6e5ade10a5c570debfd12a772baa87"
                        role: "Transactor"
                    contacts:
                      - language_code: "en"
                        name: "Janet Sparks"
                        phone_number: "342-123-123"
                  head: 12
                  link: "/api/organizations/29750870-e127-11e8-b36b-2ffd372eb4d4?head=12"
  /api/agents:
    get:
      description: Returns all agents
      parameters:
        - $ref: '#/components/parameters/head'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Success response with array of agents
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AgentModel'
                  head:
                    $ref: '#/components/schemas/HeadModel'
                  link:
                    $ref: '#/components/schemas/LinkModel'
                  paging:
                    $ref: '#/components/schemas/PagingModel'
              example:
                data:
                  - created_on: 1541441197
                    name: Joseph Maine
                    organization:
                      id: 848f0620-e127-11e8-8d44-8b67d4a09fd8
                      name: Rainforest Alliance
                      organization_type: CertifyingBody
                    public_key: >-
                      02d88cc926ddd120d62a371e0f7965f7455a0b94655e1819a92c4a78602b0688be
                  - created_on: 1541441879
                    name: Janet Sparks
                    organization:
                      id: 29750870-e127-11e8-b36b-2ffd372eb4d4
                      name: FSC
                      organization_type: StandardsBody
                    public_key: >-
                      020efa89a89835ffd4ecaf92baeb83b74eea6e5ade10a5c570debfd12a772baa87

                head: 12
                link: "/api/agents?head=12&limit=100&offset=0"
                paging:
                    first: "/api/agents?head=12&limit=100&offset=0"
                    last: "/api/agents?head=12&limit=100&offset=0"
                    limit: 100,
                    next: "/api/agents?head=12&limit=100&offset=0"
                    offset: 0,
                    prev: "/api/agents?head=12&limit=100&offset=0"
                    total: 2

        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/ServerError'
  '/api/agents/{public_key}':
    parameters:
      - in: path
        name: public_key
        schema:
          type: string
        required: true
        description: Public key of the agent
        example: 020efa89a89835ffd4ecaf92baeb83b74eea6e5ade10a5c570debfd12a772baa87
    get:
      description: Returns the agent with specified public key
      parameters:
        - $ref: '#/components/parameters/head'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Success response with requested agent
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AgentModel'
                  head:
                    $ref: '#/components/schemas/HeadModel'
                  link:
                    $ref: '#/components/schemas/LinkModel'
              example:
                data:
                  created_on: 1541441197
                  name: Joseph Maine
                  organization:
                    id: 848f0620-e127-11e8-8d44-8b67d4a09fd8
                    name: Rainforest Alliance
                    organization_type: CertifyingBody
                  public_key: >-
                      02d88cc926ddd120d62a371e0f7965f7455a0b94655e1819a92c4a78602b0688be

                head: 12
                link:
                  "/api/agents/02d88cc926ddd120d62a371e0f7965f7455a0b94655e1819a92c4a78602b0688be?head=12"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/certificates:
    get:
      description: Returns all certificates
      parameters:
        - $ref: '#/components/parameters/head'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - name: "certifying_body_id"
          description: If a certifying_body_id is passed, the results will be
            filtered and all certificates that have been issued by certifying body
            organization identified by the id will be returned.
          in: query
          schema:
            type: string
        - name: "factory_id"
          description: If a factory_id is passed,
            the results will be filtered and all certificates
            have been issued for a factory organization
            identified by the id will be returned.
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success response with array of certificates
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CertificateModel'
                  head:
                    $ref: '#/components/schemas/HeadModel'
                  link:
                    $ref: '#/components/schemas/LinkModel'
                  paging:
                    $ref: '#/components/schemas/PagingModel'
              example:
                data:
                  - certifying_body: "Rainforest Alliance"
                    certifying_body_id: "848f0620-e127-11e8-8d44-8b67d4a09fd8"
                    factory_id: "1a352ed7d2b768969197c8c617bd033981b08df29af86d01c45a56ae5666"
                    factory_name: "Stora Enso"
                    id: "FSC-COC-RA-123123"
                    standard_id: "57dafd217504ae0d81037b1a36ced0097b8129bacb2dd58f7c3c852f8c30894d"
                    standard_name: "FSC-Chain-of-Custody"
                    standard_version: "1.0"
                    valid_from: 1541442305
                    valid_to": 1547791200
                head: 13
                link: "/api/certificates?head=13&limit=100&offset=0"
                paging:
                  first: "/api/certificates?head=13&limit=100&offset=0"
                  last: "/api/certificates?head=13&limit=100&offset=0"
                  limit: 100
                  next: "/api/certificates?head=13&limit=100&offset=0"
                  offset: 0
                  prev: "/api/certificates?head=13&limit=100&offset=0"
                  total: 1
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/certificates/{certificate_id}:
    parameters:
      - in: path
        name: certificate_id
        schema:
          type: string
        required: true
        description: Id of the certificate to be retrieved
        example: FSC-COC-RA-123123
    get:
      description: Returns the certificate identified by the certificate_id
      parameters:
        - $ref: '#/components/parameters/head'
      responses:
        '200':
          description: Success response with a certificate
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CertificateModel'
                  head:
                    $ref: '#/components/schemas/HeadModel'
                  link:
                    $ref: '#/components/schemas/LinkModel'
              example:
                data:
                    certifying_body: "Rainforest Alliance"
                    certifying_body_id: "848f0620-e127-11e8-8d44-8b67d4a09fd8"
                    factory_id: "1a352ed7d2b768969197c8c617bd033981b08df29af86d01c45a56ae5666"
                    factory_name: "Stora Enso"
                    id: "FSC-COC-RA-123123"
                    standard_id: "57dafd217504ae0d81037b1a36ced0097b8129bacb2dd58f7c3c852f8c30894d"
                    standard_name: "FSC-Chain-of-Custody"
                    standard_version: "1.0"
                    valid_from: 1541442305
                    valid_to": 1547791200
                head: 13
                link: "/api/certificates/FSC-COC-RA-123123?head=13"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/factories:
    get:
      description: Returns all factories
      parameters:
        - $ref: '#/components/parameters/head'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/expand'
        - name: "name"
          description: If a name is passed, the results will be filtered and
            all factories that have match the name will be returned.
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success response with array of certificates
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FactoryModel'
                  head:
                    $ref: '#/components/schemas/HeadModel'
                  link:
                    $ref: '#/components/schemas/LinkModel'
                  paging:
                    $ref: '#/components/schemas/PagingModel'
              example:
                data:
                    - id: "1a352ed7d2b768969197c8c617bd033981b08df29af86d01c45a56ae5666"
                      name: "Stora Enso "
                      organization_type: "Factory"
                      address:
                        city: "Townsville"
                        country: "US"
                        postal_code: "55123"
                        state_province: "MN"
                        street_line_1: "123 Main St."
                      authorizations:
                        - public_key: "03a0cb061ce3f31098c45c43e8d70a8a4f3f79f2f903d7f28485633894816a5522"
                          role: "Admin"
                        - public_key": "03a0cb061ce3f31098c45c43e8d70a8a4f3f79f2f903d7f28485633894816a5522"
                          role: "Transactor"
                      contacts:
                        - language_code: "en"
                          name: "Jonathan Carter"
                          phone_number: "432-123-1234"
                head: 13
                link: "/api/organizations?head=13&limit=100&offset=0"
                paging:
                  first: "/api/organizations?head=13&limit=100&offset=0"
                  last: "/api/organizations?head=13&limit=100&offset=0"
                  limit: 100,
                  next: "/api/organizations?head=13&limit=100&offset=0"
                  offset: 0,
                  prev: "/api/organizations?head=13&limit=100&offset=0"
                  total: 1
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/factories/{organization_id}:
    parameters:
      - in: path
        name: organization_id
        schema:
          type: string
        required: true
        description: Id of the factory to be retrieved
        example: 1a352ed7d2b768969197c8c617bd033981b08df29af86d01c45a56ae5666
    get:
      description: Returns the factory identified by the organization_id
      parameters:
        - $ref: '#/components/parameters/head'
        - $ref: '#/components/parameters/expand'
      responses:
        '200':
          description: Success response with a factory
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FactoryModel'
                  head:
                    $ref: '#/components/schemas/HeadModel'
                  link:
                    $ref: '#/components/schemas/LinkModel'
              example:
                data:
                    id: "1a352ed7d2b768969197c8c617bd033981b08df29af86d01c45a56ae5666"
                    name: "Stora Enso"
                    organization_type: "Factory"
                    address:
                      city: "Townsville"
                      country: "US"
                      postal_code: "55123"
                      state_province: "MN"
                      street_line_1: "123 Main St."
                    authorizations:
                      - public_key: "03a0cb061ce3f31098c45c43e8d70a8a4f3f79f2f903d7f28485633894816a5522"
                        role: "Admin"
                      - public_key": "03a0cb061ce3f31098c45c43e8d70a8a4f3f79f2f903d7f28485633894816a5522"
                        role: "Transactor"
                    contacts:
                      - language_code: "en"
                        name: "Jonathan Carter"
                        phone_number: "432-123-1234"
                head: 13
                link: "/api/factories/1a352ed7d2b768969197c8c617bd033981b08df29af86d01c45a56ae5666?head=13"


        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/requests:
    get:
      description: Returns all requests
      parameters:
        - $ref: '#/components/parameters/head'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/expand'
        - name: "factory_id"
          description: If a factory_id is passed, the results will include only
           requests that have been created by the factory identified by this id.
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success response with array of requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RequestModel'
                  head:
                    $ref: '#/components/schemas/HeadModel'
                  link:
                    $ref: '#/components/schemas/LinkModel'
                  paging:
                    $ref: '#/components/schemas/PagingModel'
              example:
                data:
                    - id: 1a90d180-e128-11e8-b111-23eeb98b0267
                      factory:
                        id: "1a352ed7d2b768969197c8c617bd033981b08df29af86d01c45a56ae5666"
                        link: "/api/organizations/1a352ed7d2b768969197c8c617bd033981b08df29af86d01c45a56ae5666"
                      request_date: 1541442299
                      standard:
                        id: "3cbcc9914251e9510f4fa452f9386db8e0c20ef21ecd855f2440131f4738f152"
                        link: "/api/standards/3cbcc9914251e9510f4fa452f9386db8e0c20ef21ecd855f2440131f4738f152"
                      status: "Open"
                head: 13
                link: "/api/requests?head=13&limit=100&offset=0"
                paging:
                    first: "/api/requests?head=13&limit=100&offset=0"
                    last: "/api/requests?head=13&limit=100&offset=0"
                    limit: 100
                    next: "/api/requests?head=13&limit=100&offset=0"
                    offset: 0
                    prev: "/api/requests?head=13&limit=100&offset=0"
                    total: 1
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/requests/{request_id}:
    parameters:
      - in: path
        name: request_id
        schema:
          type: string
        required: true
        description: Id of the request to be retrieved
        example: 1a90d180-e128-11e8-b111-23eeb98b0267
    get:
      description: Returns the request identified by the request_id
      parameters:
        - $ref: '#/components/parameters/head'
        - $ref: '#/components/parameters/expand'
      responses:
        '200':
          description: Success response with a request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RequestModel'
                  head:
                    $ref: '#/components/schemas/HeadModel'
                  link:
                    $ref: '#/components/schemas/LinkModel'
              example:
                data:
                    id: 1a90d180-e128-11e8-b111-23eeb98b0267
                    factory:
                        id: "1a352ed7d2b768969197c8c617bd033981b08df29af86d01c45a56ae5666"
                        link: "/api/organizations/1a352ed7d2b768969197c8c617bd033981b08df29af86d01c45a56ae5666"
                    request_date: 1541442299
                    standard:
                        id: "3cbcc9914251e9510f4fa452f9386db8e0c20ef21ecd855f2440131f4738f152"
                        link: "/api/standards/3cbcc9914251e9510f4fa452f9386db8e0c20ef21ecd855f2440131f4738f152"
                    status: "Open"
                head: 13
                link: "/api/requests/1a90d180-e128-11e8-b111-23eeb98b0267?head=13"

        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/standards_body/standards:
    parameters:
      - in: path
        name: organization_id
        schema:
          type: string
        required: true
        description: Id of the organization that created the standards to be retrieved
        example: 1a352ed7d2b768969197c8c617bd033981b08df29af86d01c45a56ae5666
    get:
      description: Returns all the standard created by a particular organization
      parameters:
        - $ref: '#/components/parameters/head'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Success response with an array of standards
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/StandardModel'
                  head:
                    $ref: '#/components/schemas/HeadModel'
                  link:
                    $ref: '#/components/schemas/LinkModel'
                  paging:
                    $ref: '#/components/schemas/PagingModel'
              example:
                data:
                  - name: "FSC-Chain-of-Custody"
                    organization_id: "29750870-e127-11e8-b36b-2ffd372eb4d4"
                    standard_id: "57dafd217504ae0d81037b1a36ced0097b8129bacb2dd58f7c3c852f8c30894d"
                    versions:
                      - approval_date: 1541441899
                        description: "See link"
                        external_link: "https://us.fsc.org/en-us/certification/chain-of-custody-certification"
                        version: "1.0"
                  - name: "FSC-Forest-Management "
                    organization_id: "29750870-e127-11e8-b36b-2ffd372eb4d4"
                    standard_id: "3cbcc9914251e9510f4fa452f9386db8e0c20ef21ecd855f2440131f4738f152"
                    versions:
                        approval_date: 1541442247
                        description: "See link"
                        external_link: "https://us.fsc.org/en-us/certification/forest-management-certification"
                        version: "1.0"
                link: "/api/standards_body/standards?organization_id=29750870-e127-11e8-b36b-2ffd372eb4d4&head13=limit=100&offset=0"
                paging:
                  first: "/api/standards_body/standards?organization_id=29750870-e127-11e8-b36b-2ffd372eb4d4&head13=limit=100&offset=0"
                  last: "/api/standards_body/standards?organization_id=29750870-e127-11e8-b36b-2ffd372eb4d4&head13=limit=100&offset=0"
                  limit: 100
                  next: "/api/standards_body/standards?organization_id=29750870-e127-11e8-b36b-2ffd372eb4d4&head13=limit=100&offset=0"
                  offset: 0
                  prev: "/api/standards_body/standards?organization_id=29750870-e127-11e8-b36b-2ffd372eb4d4&head13=limit=100&offset=0"
                  total: 2
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/standards:
    get:
      description: Lists all of the standards
      parameters:
        - $ref: '#/components/parameters/head'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Success response with an array of standards
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SimplifiedStandardModel'
              example:
                data:
                  - standard_name: "FSC-Chain-of-Custody"
                    standard_id: "57dafd217504ae0d81037b1a36ced0097b8129bacb2dd58f7c3c852f8c30894d"
                  - standard_name: "FSC-Forest-Management "
                    standard_id: "3cbcc9914251e9510f4fa452f9386db8e0c20ef21ecd855f2440131f4738f152"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/blocks:
    get:
      description: Lists info for all blocks in the current chain
      parameters:
        - $ref: '#/components/parameters/head'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Success response with the requested block
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: 
                      $ref: '#/components/schemas/BlockModel'
                  head:
                    $ref: '#/components/schemas/HeadModel'
                  link:
                    $ref: '#/components/schemas/LinkModel'
                  paging:
                    $ref: '#/components/schemas/PagingModel'
                example:
                  data:
                    - block_num: 13
                      block_id: "1a352ed7d2b768969197c8c617bd033981b08df29af86d01c45a56ae5666"
                  head: 13
                  link: "/api/blocks?head=13&limit=100&offset=0"
                  paging:
                    first: "/api/blocks?head=13&limit=100&offset=0"
                    last: "/api/blocks?head=13&limit=100&offset=0"
                    limit: 100
                    next: "/api/blocks?head=13&limit=100&offset=0"
                    offset: 0
                    prev: "/api/blocks?head=13&limit=100&offset=0"
                    total: 1
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/blocks/{block_id}:
    get:
      description: Fetch a block by block ID
      parameters:
        - in: path
          name: block_id
          schema:
            type: string
          required: true
          description: Id of the block to be retrieved
          example: 1a352ed7d2b768969197c8c617bd033981b08df29af86d01c45a56ae5666
        - $ref: '#/components/parameters/head'
      responses:
        '200':
          description: Success response with a factory
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/BlockModel'
                  head:
                    $ref: '#/components/schemas/HeadModel'
                  link:
                    $ref: '#/components/schemas/LinkModel'
                example:
                  data:
                    block_num: 13
                    block_id: "1a352ed7d2b768969197c8c617bd033981b08df29af86d01c45a56ae5666"
                  head: 13
                  link: "/api/blocks/1a352ed7d2b768969197c8c617bd033981b08df29af86d01c45a56ae5666?head=13&limit=100&offset=0"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/ServerError'
